#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Dec 22, 2020 01:39:01 PM -0000  platform: Darwin

import sys
import random
import threading
import time
import tkinter
import traceback
from tkinter import filedialog, messagebox
from pygame import mixer
from tkinter import ttk
import Player
from MyException import *
from mysql.connector import DatabaseError
import music_player_support

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import music_player_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global root
    root = tk.Tk()
    top = View(root)
    music_player_support.init(root, top)
    root.resizable(False, False)
    root.mainloop()


w = None


# def create_Toplevel1(rt, *args, **kwargs):
#     '''Starting point when module is imported by another module.
#        Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
#     global w, w_win, root
#     #rt = root
#     root = rt
#     w = tk.Toplevel (root)
#     top = Toplevel1 (w)
#     music_player_support.init(w, top, *args, **kwargs)
#     return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class View:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        Balsamiq = "-family {Balsamiq Sans} -size 22 -weight " \
                   "bold -slant roman -underline 0 -overstrike 0"
        Questrial = "-family {Questrial} -size 28 -weight " \
                    "bold -slant roman -underline 0 -overstrike 0"
        Acme = "-family {Acme} -size 38 -weight " \
               "bold -slant roman -underline 0 -overstrike 0"
        Century = "-family {Century Gothic} -size 22 -weight " \
                  "bold -slant roman -underline 0 -overstrike 0"

        comfortaa = "-family {Comfortaa} -size 32 -weight " \
                    "bold -slant roman -underline 0 -overstrike 0"

        self.flag = 0
        self.count = 0
        self.double = ""
        self.difference = 0
        self.current_pos = 0
        self.current_sec = 1
        self.song_length = 1
        self.seek_value = 0
        self.music_seek = 0
        self.dark = 0
        self.flagThread = False
        self.isPlaying = False
        self.playListColor = "#000000"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=[('selected', _compcolor), ('active', _ana2color)])

        top.geometry("999x735+317+34")
        top.minsize(120, 1)
        top.maxsize(1444, 881)
        top.resizable(1, 1)
        top.title("New Toplevel")
        self.top = top
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.0, rely=0.0, relheight=1.014, relwidth=1.006)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#f6f4f9")
        self.Frame1.configure(highlightbackground="#aeb8ae")
        self.Frame1.configure(highlightcolor="black")

        self.Frame3 = tk.Frame(self.Frame1)
        self.Frame3.place(relx=0.107, rely=0.658, relheight=0.045, relwidth=0.358)

        self.Frame3.configure(relief='groove')
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief="groove")
        self.Frame3.configure(background="#f6f4f9")
        self.Frame3.configure(highlightbackground="#aeb8ae")
        self.Frame3.configure(highlightcolor="black")

        self.song_pos = ttk.Scale(self.Frame3, from_=0, to=1.0)
        self.song_pos.place(relx=0.008, rely=0.1, relwidth=0.985, relheight=0.0, height=26, bordermode='ignore')
        self.song_pos.configure(takefocus="")

        self.playList = ScrolledListBox(self.Frame1)
        self.playList.place(relx=0.587, rely=0.242, relheight=0.611, relwidth=0.369)
        self.playList.configure(background="#f6f4f9")
        self.playList.configure(cursor="xterm")
        self.playList.configure(disabledforeground="#a3a3a3")
        self.playList.configure(font=Balsamiq)
        self.playList.configure(foreground="black")
        self.playList.configure(highlightbackground="#d9d9d9")
        self.playList.configure(highlightcolor="#d9d9d9")
        self.playList.configure(selectbackground="blue")
        self.playList.configure(selectforeground="white")

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.1, rely=0.05, height=41, width=364)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#f6f4f9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#4f2f4f")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(font=Acme)
        self.Label1.configure(text=''' M o u z i k k a ''')

        self.songProgress = ttk.Progressbar(self.Frame1)
        self.songProgress.place(x=110, y=475, relwidth=0.350, relheight=0.0, height=7)
        # self.songProgress.configure(length="350")

        self.songTimePassed = tk.Label(self.Frame1)
        self.songTimePassed.place(relx=0.04, rely=0.631, height=19, width=40)
        self.songTimePassed.configure(background="#f6f4f9")
        self.songTimePassed.configure(foreground="#000000")
        self.songTimePassed.configure(font="TkDefaultFont")
        self.songTimePassed.configure(relief="flat")
        self.songTimePassed.configure(anchor='w')
        self.songTimePassed.configure(justify='left')
        self.songTimePassed.configure(text='''''')

        self.songTotalDuration = tk.Label(self.Frame1)
        self.songTotalDuration.place(relx=0.478, rely=0.631, height=19, width=40)
        self.songTotalDuration.configure(background="#f6f4f9")
        self.songTotalDuration.configure(foreground="#000000")
        self.songTotalDuration.configure(font="TkDefaultFont")
        self.songTotalDuration.configure(relief="flat")
        self.songTotalDuration.configure(anchor='w')
        self.songTotalDuration.configure(justify='left')
        self.songTotalDuration.configure(text='''''')

        self.vinylRecordImage = tk.Label(self.Frame1)
        self.vinylRecordImage.place(x=140, y=120, height=241, width=284)
        self.vinylRecordImage.configure(activebackground="#f9f9f9")
        self.vinylRecordImage.configure(activeforeground="black")
        self.vinylRecordImage.configure(background="#f6f4f9")
        self.vinylRecordImage.configure(disabledforeground="#a3a3a3")
        self.vinylRecordImage.configure(foreground="#aeb8ae")
        self.vinylRecordImage.configure(highlightbackground="#aeb8ae")
        self.vinylRecordImage.configure(highlightcolor="black")
        self._imglbl2 = tk.PhotoImage(
            file="/Users/adarshkumar/Documents/PycharmProjects/PythonProject/Mouzikka/icons/itunes-256.png")
        self.vinylRecordImage["border"] = "0"
        self.vinylRecordImage.configure(image=self._imglbl2, relief=tk.FLAT, borderwidth=0, highlightthickness=0, bd=0)
        self.vinylRecordImage.configure(text='''Label''')

        self.songName = tk.Label(self.Frame1)
        self.songName.place(relx=0.135, rely=0.564, height=29, width=316)

        self.songName.configure(background="#f6f4f9")
        self.songName.configure(foreground="#454574")
        self.songName.configure(font="TkDefaultFont")
        self.songName.configure(relief="flat")
        self.songName.configure(anchor='w')
        self.songName.configure(justify='center')
        self.songName.configure(font=Balsamiq)
        self.songName.configure(text='''Song Name''')

        self.addSongsToPlayListButton = tk.Button(self.Frame1)
        self.addSongsToPlayListButton.place(relx=0.597, rely=0.16, height=38, width=40)
        self.addSongsToPlayListButton.configure(activebackground="#ececec")
        self.addSongsToPlayListButton.configure(activeforeground="#000000")
        self.addSongsToPlayListButton.configure(background="#d9d9d9")
        self.addSongsToPlayListButton.configure(disabledforeground="#a3a3a3")
        self.addSongsToPlayListButton.configure(foreground="#000000")
        self.addSongsToPlayListButton.configure(highlightbackground="#d9d9d9")
        self.addSongsToPlayListButton.configure(highlightcolor="black")
        self.addSongsToPlayListButton.configure(pady="0")
        self._img1 = tk.PhotoImage(
            file="/Users/adarshkumar/Documents/PycharmProjects/PythonProject/Mouzikka/icons/add-64.png")
        self.addSongsToPlayListButton["border"] = "0"
        self.addSongsToPlayListButton["bg"] = "black"
        self.addSongsToPlayListButton.configure(image=self._img1, relief=tk.FLAT, borderwidth=0, highlightthickness=0,
                                                bd=0)
        self.addSongsToPlayListButton.configure(text='''Button''')

        self.deleteSongsFromPlaylistButton = tk.Button(self.Frame1)
        self.deleteSongsFromPlaylistButton.place(relx=0.750, rely=0.160, height=38, width=40)
        self.deleteSongsFromPlaylistButton.configure(activebackground="#ececec")
        self.deleteSongsFromPlaylistButton.configure(activeforeground="#000000")
        self.deleteSongsFromPlaylistButton.configure(background="#d9d9d9")
        self.deleteSongsFromPlaylistButton.configure(disabledforeground="#a3a3a3")
        self.deleteSongsFromPlaylistButton.configure(foreground="#000000")
        self.deleteSongsFromPlaylistButton.configure(highlightbackground="#d9d9d9")
        self.deleteSongsFromPlaylistButton.configure(highlightcolor="black")
        self.deleteSongsFromPlaylistButton.configure(pady="0")
        self._img2 = tk.PhotoImage(
            file="/Users/adarshkumar/Documents/PycharmProjects/PythonProject/Mouzikka/icons/remove.png")
        self.deleteSongsFromPlaylistButton["border"] = "0"
        self.deleteSongsFromPlaylistButton["bg"] = "black"
        self.deleteSongsFromPlaylistButton.configure(image=self._img2, relief=tk.FLAT, borderwidth=0,
                                                     highlightthickness=0, bd=0)
        self.deleteSongsFromPlaylistButton.configure(text='''Button''')

        self.loadFavourite = tk.Button(self.Frame1)
        self.loadFavourite.place(relx=0.900, rely=0.16, height=38, width=40)
        self.loadFavourite.configure(activebackground="#ececec")
        self.loadFavourite.configure(activeforeground="#000000")
        self.loadFavourite.configure(background="#d9d9d9")
        self.loadFavourite.configure(disabledforeground="#a3a3a3")
        self.loadFavourite.configure(foreground="#000000")
        self.loadFavourite.configure(highlightbackground="#d9d9d9")
        self.loadFavourite.configure(highlightcolor="black")
        self.loadFavourite.configure(pady="0")
        self._img3 = tk.PhotoImage(
            file="/Users/adarshkumar/Documents/PycharmProjects/PythonProject/Mouzikka/icons/history.png")
        self.loadFavourite["border"] = "0"
        self.loadFavourite["bg"] = "black"
        self.loadFavourite.configure(image=self._img3, relief=tk.FLAT, borderwidth=0, highlightthickness=0, bd=0)
        self.loadFavourite.configure(text='''Button''')

        self.addFavourite = tk.Button(self.Frame1)
        self.addFavourite.place(relx=0.209, rely=0.73, height=38, width=40)
        self.addFavourite.configure(activebackground="#ececec")
        self.addFavourite.configure(activeforeground="#000000")
        self.addFavourite.configure(background="#d9d9d9")
        self.addFavourite.configure(disabledforeground="#a3a3a3")
        self.addFavourite.configure(foreground="#000000")
        self.addFavourite.configure(highlightbackground="#d9d9d9")
        self.addFavourite.configure(highlightcolor="black")
        self.addFavourite.configure(pady="0")
        self._img4 = tk.PhotoImage(
            file="/Users/adarshkumar/Documents/PycharmProjects/PythonProject/Mouzikka/icons/speech-bubble-64.png")
        self.addFavourite["border"] = "0"
        self.addFavourite["bg"] = "black"
        self.addFavourite.configure(image=self._img4, relief=tk.FLAT, borderwidth=0, highlightthickness=0, bd=0)
        self.addFavourite.configure(text='''Button''')

        self.removeFavourite = tk.Button(self.Frame1)
        self.removeFavourite.place(relx=0.308, rely=0.73, height=38, width=40)
        self.removeFavourite.configure(activebackground="#ececec")
        self.removeFavourite.configure(activeforeground="#000000")
        self.removeFavourite.configure(background="#d9d9d9")
        self.removeFavourite.configure(disabledforeground="#a3a3a3")
        self.removeFavourite.configure(foreground="#000000")
        self.removeFavourite.configure(highlightbackground="#d9d9d9")
        self.removeFavourite.configure(highlightcolor="black")
        self.removeFavourite.configure(pady="0")
        self._img5 = tk.PhotoImage(
            file="/Users/adarshkumar/Documents/PycharmProjects/PythonProject/Mouzikka/icons/broken-heart-64-2.png")
        self.removeFavourite["border"] = "0"
        self.removeFavourite["bg"] = "black"
        self.removeFavourite.configure(image=self._img5, relief=tk.FLAT, borderwidth=0, highlightthickness=0, bd=0)
        self.removeFavourite.configure(text='''Button''')

        self.previousButton = tk.Button(self.Frame1)
        self.previousButton.place(relx=0.12, rely=0.81, height=38, width=40)
        self.previousButton.configure(activebackground="#ececec")
        self.previousButton.configure(activeforeground="#000000")
        self.previousButton.configure(background="#d9d9d9")
        self.previousButton.configure(disabledforeground="#a3a3a3")
        self.previousButton.configure(foreground="#000000")
        self.previousButton.configure(highlightbackground="#d9d9d9")
        self.previousButton.configure(highlightcolor="black")
        self.previousButton.configure(pady="0")
        self._img6 = tk.PhotoImage(
            file="/Users/adarshkumar/Documents/PycharmProjects/PythonProject/Mouzikka/icons/rewind-final-64.png")
        self.previousButton["border"] = "0"
        self.previousButton["bg"] = "white"
        self.previousButton.configure(image=self._img6, relief=tk.FLAT, borderwidth=0, highlightthickness=0, bd=0)
        self.previousButton.configure(text='''Button''')

        self.pauseButton = tk.Button(self.Frame1)
        self.pauseButton.place(relx=0.209, rely=0.81, height=38, width=40)
        self.pauseButton.configure(activebackground="#ececec")
        self.pauseButton.configure(activeforeground="#000000")
        self.pauseButton.configure(background="#d9d9d9")
        self.pauseButton.configure(disabledforeground="#a3a3a3")
        self.pauseButton.configure(foreground="#000000")
        self.pauseButton.configure(highlightbackground="#d9d9d9")
        self.pauseButton.configure(highlightcolor="black")
        self.pauseButton.configure(pady="0")
        self._img7 = tk.PhotoImage(
            file="/Users/adarshkumar/Documents/PycharmProjects/PythonProject/Mouzikka/icons/pause-64.png")
        self.pauseButton["border"] = "0"
        self.pauseButton["bg"] = "white"
        self.pauseButton.configure(image=self._img7, relief=tk.FLAT, borderwidth=0, highlightthickness=0, bd=0)
        self.pauseButton.configure(text='''Button''')

        self.playButton = tk.Button(self.Frame1)
        self.playButton.place(relx=0.308, rely=0.81, height=38, width=40)
        self.playButton.configure(activebackground="#ececec")
        self.playButton.configure(activeforeground="#000000")
        self.playButton.configure(background="#d9d9d9")
        self.playButton.configure(disabledforeground="#a3a3a3")
        self.playButton.configure(foreground="#000000")
        self.playButton.configure(highlightbackground="#d9d9d9")
        self.playButton.configure(highlightcolor="black")
        self.playButton.configure(pady="0")
        self._img8 = tk.PhotoImage(
            file="/Users/adarshkumar/Documents/PycharmProjects/PythonProject/Mouzikka/icons/play-final-64.png")
        self.playButton["border"] = "0"
        self.playButton["bg"] = "white"
        self.playButton.configure(image=self._img8, relief=tk.FLAT, borderwidth=0, highlightthickness=0, bd=0)
        self.playButton.configure(text='''Button''')

        self.stopButton = tk.Button(self.Frame1)
        self.stopButton.place(relx=0.398, rely=0.81, height=38, width=40)
        self.stopButton.configure(activebackground="#ececec")
        self.stopButton.configure(activeforeground="#000000")
        self.stopButton.configure(background="#d9d9d9")
        self.stopButton.configure(disabledforeground="#a3a3a3")
        self.stopButton.configure(foreground="#000000")
        self.stopButton.configure(highlightbackground="#d9d9d9")
        self.stopButton.configure(highlightcolor="black")
        self.stopButton.configure(pady="0")
        self._img9 = tk.PhotoImage(
            file="/Users/adarshkumar/Documents/PycharmProjects/PythonProject/Mouzikka/icons/stop-final-64.png")
        self.stopButton["border"] = "0"
        self.stopButton["bg"] = "white"
        self.stopButton.configure(image=self._img9, relief=tk.FLAT, borderwidth=0, highlightthickness=0, bd=0)
        self.stopButton.configure(text='''Button''')

        self.Frame2 = tk.Frame(self.Frame1)
        self.Frame2.place(relx=-0.005, rely=0.93, relheight=0.060, relwidth=1.1)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#ebebeb")

        self.vol_scale = ttk.Scale(self.Frame2, from_=0, to=1.0)
        self.vol_scale.place(relx=0.03, rely=0.200, relwidth=0.1, relheight=0.0, height=26, bordermode='ignore')
        self.vol_scale.configure(takefocus="")

        self.darkMode = ttk.Button(self.Frame2)
        self.darkMode.place(relx=0.200, rely=0.070, height=28, width=110)
        self.darkMode.configure(text="Dark Mode")

        self.Label3 = tk.Label(self.Frame2)
        self.Label3.place(relx=0.325, rely=0.180, height=21, width=600)
        self.Label3.configure(background="#ebebeb")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#284343")
        self.Label3.configure(font=Balsamiq)
        self.Label3.configure(text='''Mouzikka  -  Dance  to  the  Rhythm  of  Your  Heart''')
        self.setup_player()

    def setup_player(self):
        try:
            self.my_player = Player.Player()
            if self.my_player.get_database_status():
                image = tkinter.PhotoImage(
                    file="/Users/adarshkumar/Documents/PycharmProjects/PythonProject/Mouzikka/icons/tick.png")
                self.top.iconphoto(self.top, image)
                messagebox.showinfo("Success ! ", "Connected to the Database Successfully")
                self.addFavourite.config(command=self.add_song_to_favourites)
                self.removeFavourite.config(command=self.remove_song_from_favourites)
                self.loadFavourite.config(command=self.load_songs_from_favourites)
            else:
                raise Exception("Sorry ! Not Connected to Database")
        except Exception as ex:
            image = tkinter.PhotoImage(
                file="/Users/adarshkumar/Documents/PycharmProjects/PythonProject/Mouzikka/icons/shield.png")
            self.top.iconphoto(self.top, image)
            messagebox.showerror("Database Error", ex)
            print(traceback.format_exc())
            self.addFavourite.config(state="disabled")
            self.loadFavourite.config(state="disabled")
            self.removeFavourite.config(state="disabled")
        self.vol_scale.config(from_=0, to=100, command=self.change_volume)
        self.vol_scale.set(30)
        self.song_pos.config(from_=0, to=100, command=self.seek_music)
        self.song_pos.set(0)
        comfortaa = "-family {Comfortaa} -size 18 -weight " \
                    "bold -slant roman -underline 0 -overstrike 0"
        self.addSongsToPlayListButton.config(command=self.add_song)
        self.deleteSongsFromPlaylistButton.config(command=self.remove_song)
        self.playButton.config(command=self.play_song)
        self.stopButton.config(command=self.stop_song)
        self.pauseButton.config(command=self.pause_song)
        self.darkMode.config(command=self.dark_mode)
        self.previousButton.config(command=self.previous_song)
        self.playList.config(font=comfortaa)
        self.playList.bind("<Double-Button-1>", self.list_double_click)
        self.top.title("Mouzikka - Dance to the Rhythm of Your Heart")
        image2 = tkinter.PhotoImage(
            file="/Users/adarshkumar/Documents/PycharmProjects/PythonProject/Mouzikka/icons/itunes.png")
        self.top.iconphoto(self.top, image2)
        self.top.protocol("WM_DELETE_WINDOW", self.closewindow)
        self.isPaused = False
        self.isPlaying = False
        self.my_thread = None
        self.isThreadRunning = False
        self.stopThread = False

    def change_volume(self, value):
        vol_scale = float(value) / 100
        self.my_player.set_volume(vol_scale)

    def add_song(self):
        song_name = self.my_player.add_song()
        if song_name is None:
            return
        for i in range(0, len(song_name)):
            self.playList.insert(tkinter.END, song_name[i])
        # self.playList.insert(tkinter.END, song_name)
        rcolor = lambda: random.randint(0, 255)
        red = hex(rcolor())
        green = hex(rcolor())
        blue = hex(rcolor())
        red = red[2:]
        green = green[2:]
        blue = blue[2:]
        if len(red) == 1:
            red = '0' + red
        if len(green) == 1:
            green = '0' + green
        if len(blue) == 1:
            blue = '0' + blue
        mycolor = "#" + red + green + blue
        self.playListColor = mycolor
        self.playList.config(fg=mycolor)


    def dark_mode(self):
        if self.dark == 0:
            self.Frame1.configure(background="#000000")
            self.Frame3.configure(background="#000000")
            self.vinylRecordImage.configure(background="#000000")
            self.playList.configure(background="#727282")
            self.Label1.configure(foreground="#ffffff")
            self.Label1.configure(background="#000000")
            self.songTimePassed.configure(background="#000000")
            self.songTimePassed.configure(foreground="#ffffff")
            self.songTotalDuration.configure(background="#000000")
            self.songTotalDuration.configure(foreground="#ffffff")
            self.songName.configure(background="#000000")
            self.songName.configure(foreground="#ffffff")
            self.playList.config(fg="#ffffff")
            self.darkMode.configure(text="Light Mode")
            self.dark = 1
        elif self.dark == 1:
            self.dark = 0
            self.playList.configure(background="#f6f4f9")
            self.Frame1.configure(background="#f6f4f9")
            self.Frame3.configure(background="#f6f4f9")
            self.vinylRecordImage.configure(background="#f6f4f9")
            self.Label1.configure(foreground="#4f2f4f")
            self.Label1.configure(background="#f6f4f9")
            self.songTimePassed.configure(background="#f6f4f9")
            self.songTimePassed.configure(foreground="#000000")
            self.songTotalDuration.configure(background="#f6f4f9")
            self.songTotalDuration.configure(foreground="#000000")
            self.songName.configure(background="#f6f4f9")
            self.songName.configure(foreground="#454574")
            self.playList.config(fg=self.playListColor)
            self.darkMode.configure(text="Dark Mode")

    def remove_song(self):
        self.song_index_tuple = self.playList.curselection()
        try:
            if len(self.sel_song_index_tuple) == 0:
                raise NoSongSeletedError("Please select a song to play")
            song_name = self.playList.get(self.song_index_tuple[0])
            self.playList.delete(self.sel_song_index_tuple[0])
            self.my_player.remove_song(song_name)
        except (NoSongSeletedError) as ex1:
            messagebox.showerror("Error!!", ex1)

    def show_song_details(self):
        self.song_length = int(self.my_player.get_song_length(self.song_name))
        min, sec = divmod(self.song_length, 60)
        self.songTotalDuration.config(text=str(min) + " : " + str(sec))
        self.songTimePassed.config(text="0 : 0")
        ext_index = self.song_name.rfind(".")
        sname = self.song_name[0:ext_index]
        if len(sname) > 22:
            sname = sname[0:22] + " . . ."
        self.songName.configure(text=sname)

    def play_seek_song(self, current_sec):
        # print("Under seek ", self.music_seek)
        # current = self.music_seek
        self.my_player.play_seek_song(current_sec)

    def play_song(self):
        self.flagThread = False
        self.clear_progress()
        time.sleep(.2)
        if self.isThreadRunning == True:
            self.stopThread = True
            self.my_player.stop_song()
            self.isThreadRunning = False
            self.isPlaying = True
            time.sleep(.5)
        self.stopThread = False
        self.sel_song_index_tuple = self.playList.curselection()
        # print("tuple",self.sel_song_index_tuple)
        try:
            if len(self.sel_song_index_tuple) == 0:
                raise NoSongSeletedError("Please select a song to play")
            # print("Name : ", self.playList.get(self.sel_song_index_tuple[0]))
            self.sel_song_index_tuple = self.playList.curselection()
            self.song_name = self.playList.get(self.sel_song_index_tuple[0])
            # print("Name str",self.song_name)
            self.stopThread = True
            self.flagThread = False
            time.sleep(.2)
            self.show_song_details()
            self.my_player.play_song()
            self.change_volume(self.vol_scale.get())
            self.flagThread = True
            self.isPlaying = True
            # self.songProgress.config(length=self.song_length)
            # self.songProgress.config(maximum=self.song_length)
            self.count += 1
            self.setup_thread()
        except (NoSongSeletedError) as ex1:
            messagebox.showerror("Error!!", ex1)

    def setup_thread(self):
        if self.double == "Double-1":
            return
        self.my_thread = threading.Thread(target=self.show_timer, args=(self.song_length,))
        self.my_thread.name = "Mouzikka2.0"
        self.isPlaying = True
        self.isThreadRunning = True
        self.my_thread.start()

    def stop_song(self):
        self.stopThread = True
        self.flagThread = False
        self.songTimePassed.config(text="0 : 0")
        self.songTotalDuration.config(text="0 : 0")
        self.songName.configure(text='''Song Name''')
        self.clear_progress()
        time.sleep(.5)
        if self.isThreadRunning == True:
            self.my_player.stop_song()
            self.stopThread = True
            self.isThreadRunning = False
            self.isPlaying = False
            time.sleep(1)

    def clear_progress(self):
        self.songProgress["value"] = 0
        self.song_pos.set(0)

    def show_timer(self, total_sec):
        self.stopThread = False
        current_sec = 0
        self.songProgress["value"] = 0
        self.song_pos.set(0)
        self.current_sec = current_sec
        self.songProgress.stop()
        while current_sec <= total_sec:
            if self.flagThread == False:
                print("Thread Stopped Here")
                break
            if self.difference > 2:
                if self.isPaused == False:
                    current_sec = int((float(self.seek_value) * self.song_length) / 100)
                    self.current_sec = current_sec
                    self.play_seek_song(self.current_sec)
                    time.sleep(.2)
            elif self.difference < 0:
                if self.isPaused == False:
                    current_sec = int((float(self.seek_value) * self.song_length) / 100)
                    self.current_sec = current_sec
                    self.play_seek_song(self.current_sec)
                    time.sleep(.2)
            if self.isPaused == True:
                continue
            elif self.isPlaying == True:
                self.current_sec = current_sec
                progress_percent = self.current_sec / float(self.song_length) * 100
                minute, sec = divmod(self.current_sec, 60)
                self.songTimePassed.config(text=str(minute) + " : " + str(sec))
                self.songProgress["value"] = progress_percent
                self.song_pos.set(progress_percent)
                time.sleep(1)
                # print("loop",progress_percent * float(self.song_length))
                # print(float(self.seek_value) * float(self.song_length))
                current_sec += 1
            if self.stopThread == True:
                break
        print("Thread stopped")
        if self.stopThread == False:
            current_sec = 0
            self.songProgress["value"] = 0
            self.song_pos.set(0)
            self.current_sec = current_sec
            self.songProgress.stop()
            self.load_next_song()
        else:
            self.stopThread = False

    def seek_music(self, value):
        if self.isPlaying:
            self.seek_value = value
            progress_percent = self.current_sec / float(self.song_length) * 100
            self.difference = progress_percent - float(value)
            # for thread in threading.enumerate():
            #     print(thread.name)

    def load_next_song(self):
        self.stopThread = True
        self.flagThread = False
        time.sleep(.2)
        if self.isThreadRunning == True:
            self.stopThread = True
        self.clear_progress()
        self.stop_song()
        self.stopThread = True
        self.isThreadRunning = False
        self.next_song_index = self.sel_song_index_tuple[0] + 1
        if self.next_song_index == self.my_player.get_song_count():
            self.next_song_index = 0
        self.playList.select_clear(0, tk.END)
        self.playList.selection_set(self.next_song_index)
        self.play_song()

    def previous_song(self):
        self.stopThread = True
        self.flagThread = False
        time.sleep(.2)
        if self.isThreadRunning == True:
            self.stopThread = True
        self.clear_progress()
        self.stop_song()
        self.sel_song_index_tuple = self.playList.curselection()
        # print(self.sel_song_index_tuple)
        try:
            if self.sel_song_index_tuple[0] == 0:
                # print(self.playList.get(0, tk.END))
                previous_song_index = self.playList.get(0, tk.END)
                if len(previous_song_index) == 1:
                    messagebox.showinfo("previous_song", "No Previous Song Found")
                else:
                    self.playList.select_set(len(previous_song_index) - 1)
                    self.playList.select_clear(self.sel_song_index_tuple[0])
                    self.show_song_details()
                    self.my_player.play_song()
                    self.stopThread = True
                    self.isPlaying = True
                    self.change_volume(self.vol_scale.get())
                    self.play_song()
            elif self.sel_song_index_tuple[0] > 0:
                self.song_name = self.playList.get(self.sel_song_index_tuple[0] - 1)
                self.playList.select_set(self.sel_song_index_tuple[0] - 1)
                self.playList.select_clear(self.sel_song_index_tuple[0])
                self.show_song_details()
                self.my_player.play_song()
                self.change_volume(self.vol_scale.get())
                self.isPlaying = True
                self.stopThread = True
                self.play_song()
        except NoSongSeletedError as ex1:
            messagebox.showerror("Error!!", ex1)


    def load_previous_song(self):
        self.stopThread = True
        self.flagThread = False
        time.sleep(.2)
        if self.isThreadRunning == True:
            self.stopThread = True
        self.clear_progress()
        try:
            if not hasattr(self, "sel_song_index_tuple"):
                raise NoSongSeletedError("Please select a Song")
            self.previous_song_index = self.sel_song_index_tuple[0] - 1
            if self.previous_song_index == -1:
                # print(self.my_player.get_song_count())
                self.previous_song_index = self.my_player.get_song_count() - 1
            self.playList.select_clear(0, tkinter.END)
            self.playList.selection_set(self.previous_song_index)
            self.play_song()
        except NoSongSeletedError as ex1:
            messagebox.showerror("Error!!", ex1)

    def pause_song(self):
        if self.isPlaying == True:
            if self.isPaused == True:
                self.my_player.unpause_song()
                self.isPaused = False
            else:
                self.isPaused = True
                self.my_player.pause_song()

    def list_double_click(self, e):
        if self.count == 0:
            self.count += 1
            self.double = "Double-1"
        else:
            self.double = "Adarsh_Kumar"
        if self.isThreadRunning == True:
            self.stopThread = True
        self.clear_progress()
        self.stop_song()
        self.stopThread = True
        self.flagThread = False
        time.sleep(.3)
        self.play_song()

    def closewindow(self):
        result = messagebox.askyesno("App Closing!!!", "Do you want to quit ?")
        if result:
            self.flagThread = False
            self.stopThread = True
            self.my_player.close_player()
            messagebox.showinfo("Have a Good day", "Thanks for Using \"Mouzikka\"")
            self.top.destroy()

    def add_song_to_favourites(self):
        fav_song_index_tuple = self.playList.curselection()
        try:
            if len(fav_song_index_tuple) == 0:
                raise NoSongSeletedError("Please select a song before adding it to favorites ")
            song_name = self.playList.get(fav_song_index_tuple[0])
            result = self.my_player.add_song_to_favourite(song_name)
            messagebox.showinfo("Success!!", result)
        except (NoSongSeletedError) as ex1:
            messagebox.showerror("Error!!", ex1)
        except (DatabaseError) as ex2:
            messagebox.showerror("Database Error", "Song cannot be added")
            print(traceback.format_exc())

    def remove_song_from_favourites(self):
        fav_song_index_tuple = self.playList.curselection()
        try:
            if len(fav_song_index_tuple) == 0:
                raise NoSongSeletedError("Please select a song before removing it from favorites ")
            song_name = self.playList.get(fav_song_index_tuple[0])
            result = self.my_player.remove_song_from_favourites(song_name)
            messagebox.showinfo("Success!!", result)
        except (NoSongSeletedError) as ex1:
            messagebox.showerror("Error!!", ex1)
        except (DatabaseError) as ex2:
            messagebox.showerror("Database Error", "Song cannot be added")
            print(traceback.format_exc())

    def load_songs_from_favourites(self):
        try:
            load_result = self.my_player.load_songs_from_favourites()
            result = load_result[0]
            if result.find("No Songs Present") != -1:
                messagebox.showinfo("Favorites Empty!!", "No songs present in your favorites")
                return
            self.playList.delete(0, tkinter.END)
            song_dict = load_result[1]
            for song_name in song_dict:
                self.playList.insert(tkinter.END, song_name)
                rcolor = lambda: random.randint(0, 255)
                red = hex(rcolor())
                green = hex(rcolor())
                blue = hex(rcolor())
                red = red[2:]
                green = green[2:]
                blue = blue[2:]
                if len(red) == 1:
                    red = '0' + red
                if len(green) == 1:
                    green = '0' + green
                if len(blue) == 1:
                    blue = '0' + blue
                mycolor = "#" + red + green + blue
                self.playListColor = mycolor
                self.playList.config(fg=mycolor)
            messagebox.showinfo("Favorites Loaded !!!", "Songs loaded Successfully from favorites")
        except (DatabaseError) as ex2:
            messagebox.showerror("Database Error", "Song cannot br added")
            print(traceback.format_exc())


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

    def size_(self):
        sz = tk.Listbox.size(self)
        return sz


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
